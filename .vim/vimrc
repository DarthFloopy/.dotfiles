
set nocompatible

"Vundle bootstrap
if (! filereadable($HOME . '/.vim/bundle/Vundle.vim/.git/config') && confirm("Clone Vundle?", "Y\nn") == 1)
    exec '!git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim'
    source ~/.vim/vundle_config
    PluginInstall
else
    source ~/.vim/vundle_config
endif


set backspace=indent,eol,start

set tabstop=4
set autoindent
" other settings managed by tpope/vim-sleuth

" TODO: put filetype detection in separate file
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.mdx set filetype=markdown

autocmd FileType markdown set linebreak
autocmd FileType text set linebreak
autocmd FileType markdown inoremap ``` ```<CR>```<Esc>O

autocmd BufRead,BufNewFile .myrc      set filetype=sh
autocmd BufRead,BufNewFile .myaliases set filetype=sh
autocmd BufRead,BufNewFile vundle_config set filetype=vim
autocmd BufRead,BufNewFile coc_config set filetype=vim

autocmd BufRead,BufNewFile *.nvim set filetype=vim

if has("gui_running")
    set guifont=UbuntuMono-Bold:h16
    set columns=140
    set hlsearch
    set linespace=2

    " Try to get rid of middle-click-to-paste
    nnoremap <MiddleMouse> <Nop>
    nnoremap <2-MiddleMouse> <Nop>
    nnoremap <3-MiddleMouse> <Nop>
    nnoremap <4-MiddleMouse> <Nop>

    inoremap <MiddleMouse> <Nop>
    inoremap <2-MiddleMouse> <Nop>
    inoremap <3-MiddleMouse> <Nop>
    inoremap <4-MiddleMouse> <Nop>
endif

set nolist
set listchars=eol:¶,tab:⇥\ ,space:·
highlight NonText guibg=NONE ctermbg=NONE
highlight SpecialKey guibg=NONE ctermbg=NONE
highlight Comment ctermfg=777 guifg=#aaaaaa

syntax on
set display=lastline
set nowrap
set ruler
set number relativenumber
if has('signs')
    if has('nvim')
        set signcolumn=yes:2
    else
        set signcolumn=auto
    endif
endif
set colorcolumn=80
set cursorline
set incsearch
set ignorecase
set smartcase

set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set foldlevelstart=99

if &t_Co > 128
    set termguicolors
endif
if has('nvim')
    let g:tokyonight_style = 'storm'
    colorscheme tokyonight
else
    colorscheme solarized8
endif
let g:airline_theme = 'onedark'
set background=dark

set scrolloff=1
set guicursor=a:block

if has('nvim-0.8')
  set cmdheight=0
else
  set cmdheight=2
endif

map <Space> <Nop>
let mapleader = " "
nnoremap <Leader>. :set invlist<CR>
nnoremap <Leader>s :w<CR>
nnoremap <silent> <Leader>w :confirm q<CR>
function ToggleDarkBackground()
    if &background == 'dark'
        set background=light
    else
        set background=dark
    endif
endfunction
nnoremap <Leader>b :call ToggleDarkBackground()<CR>
nnoremap <silent> <Leader>nf :NERDTreeFind<CR>
nnoremap <silent> <Leader>nt :NERDTreeToggle<CR>

" quick fix list mappings
nnoremap <silent> <Leader>cn :cnext<CR>
nnoremap <silent> <Leader>cp :cprev<CR>
nnoremap <silent> <Leader>co :copen<CR>
nnoremap <silent> <Leader>ln :lnext<CR>
nnoremap <silent> <Leader>lp :cprev<CR>
nnoremap <silent> <Leader>lo :lopen<CR>

autocmd Filetype java nnoremap <Leader>O :CocCommand java.action.organizeImports<CR>

" quickly log stuff
autocmd Filetype java vnoremap <Leader>l "lyoSystem.out.println();<C-[>P
autocmd Filetype javascript,typescript vnoremap <Leader>l "lyoconsole.log()<C-[>P

set splitbelow
set splitright
nnoremap <silent> <Leader>- :split<CR>
nnoremap <silent> <Leader><Bslash> :vsplit<CR>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"inoremap ii <Esc>
inoremap jk <Esc>
"inoremap kj <Esc>
"inoremap ja <Esc>ja
"inoremap jA <Esc>jA
"inoremap jI <Esc>jI

vnoremap v <Esc>

vnoremap > >gv
vnoremap < <gv
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

set timeoutlen=1000

if executable("zsh")
    set shell=zsh
else
    set shell=bash
endif
set shellcmdflag=-c

set mouse=a

cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" copy and paste from system clipboard
nmap <Leader>y "+y
vmap <Leader>y "+y
nmap <Leader>d "+d
vmap <Leader>d "+d
nmap <Leader>p "+p
vmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>P "+P


" From here on is plugin config


" let g:comfortable_motion_friction = 200.0

" let g:comfortable_motion_no_default_key_mappings = 1
" let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.
" nnoremap <silent> <C-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
" nnoremap <silent> <C-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>
" nnoremap <silent> <C-f> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 4)<CR>
" nnoremap <silent> <C-b> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -4)<CR>

"let g:better_whitespace_enabled=0


" Lots of airline config

let g:airline_skip_empty_sections = 1
let g:airline_inactive_collapse=0

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tab_count = 1
let g:airline#extensions#tabline#close_symbol = '✖︎'

let g:airline_powerline_fonts = 1
let g:airline_highlighting_cache = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.branch = ''
let g:airline_symbols.maxlinenr = ''

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''

" let g:airline#extensions#tabline#left_sep = ''
" let g:airline#extensions#tabline#left_alt_sep = ''
" let g:airline#extensions#tabline#right_sep = ''
" let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
" (end airline config)

let delimitMate_expand_cr = 2
let delimitMate_expand_space = 1

set updatetime=1000

let g:user_emmet_leader_key=','
let g:user_emmet_install_global = 0
autocmd FileType html,css,scss,sass EmmetInstall
let g:user_emmet_mode='i'

" for coc-css
autocmd FileType scss setl iskeyword+=@-@,-,%

let g:ft_improved_ignorecase = 1

nmap <Leader>gu <Plug>(GitGutterUndoHunk)
nmap <Leader>gp <Plug>(GitGutterPreviewHunk)
" Unmap and remap some gitgutter mappings so <Leader>h works
let g:gitgutter_map_keys = 0
nmap [c <Plug>(GitGutterPrevHunk)
nmap ]c <Plug>(GitGutterNextHunk)

autocmd FileType nerdtree set signcolumn=no
" Exit Vim if NERDTree is the only window left. (copied from NERDTree readme)
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1
    \ && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'*',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'→',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }

" quickscope
" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" highlight QuickScopePrimary guifg='#00C7DF' gui=underline ctermfg=155 cterm=underline
" highlight QuickScopeSecondary guifg='#afff5f' gui=underline ctermfg=81 cterm=underline
" let g:qs_max_chars=150


let g:highlightedyank_highlight_duration = 100

" this is just the default settings + 'help'
let g:numbers_exclude = ['unite', 'tagbar', 'startify', 'gundo', 'vimshell', 'w3m', 'help']

" For fzf
nnoremap <silent> <Leader>F :Files!<CR>
let g:fzf_preview_window = ['up:40%:hidden', 'ctrl-/']

nmap <silent> <Leader>t :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_indent = 1
let g:tagbar_show_data_type = 1
let g:tagbar_show_tag_linenumbers = 1
let g:tagbar_foldlevel = 2
let g:tagbar_autoshowtag = 1

" vim-expand-region config
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'a"'  :0,
      \ 'i''' :0,
      \ 'a''' :0,
      \ 'i]'  :1,
      \ 'a]'  :1,
      \ 'ib'  :1,
      \ 'ab'  :1,
      \ 'iB'  :1,
      \ 'aB'  :1,
      \ 'il'  :0,
      \ 'al'  :0,
      \ 'ip'  :0,
      \ 'ii'  :0,
      \ 'ie'  :0,
      \ 'ae'  :0,
      \ }

" lightspeed config
nnoremap s s
nnoremap gs <Nop>
nmap f <Plug>Lightspeed_s
nmap F <Plug>Lightspeed_S
nmap t <Plug>Lightspeed_gs
nmap T <Plug>Lightspeed_gS
" nmap g<Tab> <Plug>Lightspeed_gs
" nmap g<S-Tab> <Plug>Lightspeed_gS
nmap ; <Plug>Lightspeed_;_sx
nmap , <Plug>Lightspeed_,_sx

" Disable devicons
" (user should enable this when they have installed a patched font)
" (https://github.com/ryanoasis/vim-devicons)
" (https://github.com/ryanoasis/nerd-fonts)
let g:webdevicons_enable = 0

source ~/.vim/coc_config

